import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime
import os
from dotenv import load_dotenv
from openai import OpenAI
import matplotlib.pyplot as plt
import io

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="An√°lise de Arquivos",
    page_icon="üìÑ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Carregar vari√°veis de ambiente
load_dotenv()

# Configurar a API OpenAI
client = OpenAI(api_key=os.getenv('OPENAI_API_KEY'))

# T√≠tulo e descri√ß√£o
st.title("üìÑ An√°lise de Arquivos")
st.markdown("""
    Esta p√°gina permite fazer upload de m√∫ltiplos arquivos para an√°lise pelo assistente virtual.
    Formatos suportados: CSV, Excel, JSON, TXT
""")

# Inicializar o dicion√°rio de DataFrames na sess√£o
if 'dataframes' not in st.session_state:
    st.session_state['dataframes'] = {}

# Fun√ß√£o para processar diferentes tipos de arquivo
def process_file(file):
    try:
        if file.name.endswith('.csv'):
            df = pd.read_csv(file)
        elif file.name.endswith(('.xls', '.xlsx')):
            df = pd.read_excel(file)
        elif file.name.endswith('.json'):
            df = pd.read_json(file)
        elif file.name.endswith('.txt'):
            df = pd.read_csv(file, sep='\t')
        else:
            st.error("Formato de arquivo n√£o suportado!")
            return None
        return df
    except Exception as e:
        st.error(f"Erro ao processar o arquivo: {str(e)}")
        return None

# Container para upload de arquivo
with st.container():
    st.subheader("Upload de Arquivos")
    uploaded_file = st.file_uploader(
        "Escolha um arquivo para an√°lise",
        type=['csv', 'xlsx', 'xls', 'json', 'txt']
    )

    if uploaded_file is not None:
        # Processar o arquivo
        df = process_file(uploaded_file)
        
        if df is not None:
            # Salvar o DataFrame na sess√£o
            st.session_state['dataframes'][uploaded_file.name] = df
            st.success(f"Arquivo '{uploaded_file.name}' carregado com sucesso!")

# Exibir lista de arquivos carregados
if st.session_state['dataframes']:
    st.markdown("---")
    st.subheader("Arquivos Carregados")
    
    for filename, df in st.session_state['dataframes'].items():
        with st.expander(f"üìÑ {filename}"):
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("N√∫mero de Linhas", f"{len(df):,}")
            with col2:
                st.metric("N√∫mero de Colunas", f"{len(df.columns):,}")
            with col3:
                st.metric("Tamanho do Arquivo", f"{df.memory_usage(deep=True).sum() / 1024:.2f} KB")
            
            st.dataframe(df.head(), use_container_width=True)
            
            if st.button(f"Remover {filename}", key=f"remove_{filename}"):
                del st.session_state['dataframes'][filename]
                st.experimental_rerun()

# Container para chat com o assistente
if st.session_state['dataframes']:
    with st.container():
        st.markdown("---")
        st.subheader("Chat com o Assistente")
        
        # Bot√£o Incluir acima do chat
        if st.button("‚ûï Incluir", use_container_width=True, key="file_include_button"):
            st.session_state['show_file_code_input'] = True
        
        # Inicializar hist√≥rico de chat se n√£o existir
        if 'file_chat_history' not in st.session_state:
            st.session_state['file_chat_history'] = []
        
        # Exibir hist√≥rico de chat
        for message in st.session_state['file_chat_history']:
            with st.chat_message(message["role"]):
                st.write(message["content"])
        
        # Container para input de chat
        if prompt := st.chat_input("Fa√ßa uma pergunta sobre os dados dos arquivos..."):
            # Adicionar mensagem do usu√°rio ao hist√≥rico
            st.session_state['file_chat_history'].append({"role": "user", "content": prompt})
            
            # Exibir mensagem do usu√°rio
            with st.chat_message("user"):
                st.write(prompt)
            
            try:
                # Preparar o contexto com os dados de todos os arquivos
                context = "Informa√ß√µes dos arquivos carregados:\n\n"
                for filename, df in st.session_state['dataframes'].items():
                    context += f"""
                    Arquivo: {filename}
                    - N√∫mero de linhas: {len(df)}
                    - N√∫mero de colunas: {len(df.columns)}
                    - Colunas: {', '.join(df.columns)}
                    
                    Primeiras linhas:
                    {df.head().to_string()}
                    
                    Estat√≠sticas b√°sicas:
                    {df.describe().to_string()}
                    
                    ---
                    """
                
                # Criar o prompt para o GPT
                messages = [
                    {"role": "system", "content": """Voc√™ √© um assistente especializado em an√°lise de dados. 
                    Use o contexto fornecido para responder √†s perguntas sobre os dados dos arquivos.
                    
                    IMPORTANTE: 
                    1. Ao gerar c√≥digo Python, use a vari√°vel 'dataframes' que cont√©m todos os DataFrames carregados
                    2. Para acessar um DataFrame espec√≠fico, use: df = dataframes['nome_do_arquivo']
                    3. N√ÉO tente ler os arquivos novamente, pois eles j√° est√£o carregados em mem√≥ria
                    4. Voc√™ pode combinar dados de diferentes arquivos se necess√°rio
                    5. SEMPRE verifique os tipos de dados antes de fazer opera√ß√µes:
                       - Use df.dtypes para ver os tipos de cada coluna
                       - Use df.head() para visualizar os dados
                       - Converta colunas para o tipo correto se necess√°rio (ex: pd.to_numeric())
                    
                    EXEMPLOS DE AN√ÅLISES QUE VOC√ä PODE FAZER:
                    1. An√°lises Univariadas:
                       - Distribui√ß√£o de vendas por regi√£o
                       - N√≠veis de compet√™ncias por fun√ß√£o
                       - Histogramas de estoque
                       - Box plots de vendas
                    
                    2. An√°lises Bivariadas:
                       - Rela√ß√£o entre vendas e estoque
                       - Compet√™ncias vs. N√≠veis esperados
                       - Vendas por m√™s e regi√£o
                    
                    3. An√°lises Multivariadas:
                       - Vendas, estoque e regi√£o
                       - Compet√™ncias, n√≠veis e fun√ß√µes
                    
                    4. An√°lises Temporais:
                       - Evolu√ß√£o das vendas ao longo do tempo
                       - Sazonalidade nas vendas
                    
                    5. An√°lises Comparativas:
                       - Compara√ß√£o entre regi√µes
                       - Compara√ß√£o entre fun√ß√µes
                    
                    SEMPRE que poss√≠vel:
                    1. Crie visualiza√ß√µes usando Plotly ou Matplotlib
                    2. Forne√ßa insights sobre os dados
                    3. Sugira an√°lises adicionais
                    4. Explique os resultados encontrados
                    
                    Quando o usu√°rio pedir exemplos ou n√£o especificar uma an√°lise:
                    1. Mostre 3-5 exemplos de an√°lises diferentes
                    2. Inclua visualiza√ß√µes para cada exemplo
                    3. Explique o que cada an√°lise revela
                    4. Sugira an√°lises complementares
                    
                    EXEMPLO DE C√ìDIGO:
                    ```python
                    # Acessar um DataFrame espec√≠fico
                    df_vendas = dataframes['vendas_estoque_por_mes_regiao.xlsx']
                    
                    # Verificar tipos de dados
                    print("Tipos de dados:")
                    print(df_vendas.dtypes)
                    
                    # Verificar primeiras linhas
                    print("\nPrimeiras linhas:")
                    print(df_vendas.head())
                    
                    # Converter colunas para o tipo correto se necess√°rio
                    df_vendas['vendas'] = pd.to_numeric(df_vendas['vendas'], errors='coerce')
                    df_vendas['estoque'] = pd.to_numeric(df_vendas['estoque'], errors='coerce')
                    
                    # Criar um gr√°fico de barras
                    fig = px.bar(df_vendas, x='regiao', y='vendas', title='Vendas por Regi√£o')
                    ```"""},
                    {"role": "user", "content": f"Contexto: {context}\n\nPergunta: {prompt}"}
                ]
                
                # Fazer a chamada √† API
                response = client.chat.completions.create(
                    model="gpt-3.5-turbo",
                    messages=messages,
                    max_tokens=500,
                    temperature=0.7
                )
                
                # Obter a resposta
                assistant_response = response.choices[0].message.content
                
                # Adicionar resposta ao hist√≥rico
                st.session_state['file_chat_history'].append({"role": "assistant", "content": assistant_response})
                
                # Exibir resposta
                with st.chat_message("assistant"):
                    st.write(assistant_response)
                
            except Exception as e:
                error_message = f"Erro ao processar a pergunta: {str(e)}"
                st.error(error_message)
                st.session_state['file_chat_history'].append({"role": "assistant", "content": error_message})

        # Interface de entrada de c√≥digo
        if st.session_state.get('show_file_code_input', False):
            st.markdown("---")
            st.subheader("Interface de Entrada de C√≥digo")
            st.info("""
            **Dica:** Para exibir gr√°ficos no Streamlit:
            1. Para Plotly: crie o objeto da figura (ex: `fig = px.scatter(...)`) e **n√£o** use `fig.show()`
            2. Para Matplotlib: crie a figura (ex: `fig = plt.figure()`) e **n√£o** use `plt.show()`
            Basta criar o objeto da figura e clicar em "Executar C√≥digo" para v√™-lo na tela.
            
            **Acesso aos DataFrames:**
            - Use `st.session_state['dataframes']` para acessar todos os DataFrames carregados
            - Exemplo: `df = st.session_state['dataframes']['nome_do_arquivo']`
            """)
            
            # Campo de entrada de c√≥digo
            code_input = st.text_area(
                "Digite seu c√≥digo Python:",
                height=200,
                key="file_code_input_area"
            )
            
            col1, col2 = st.columns([1, 5])
            with col1:
                if st.button("Executar e Salvar", key="file_execute_code_button"):
                    if code_input:
                        try:
                            # Criar um namespace local para execu√ß√£o
                            local_vars = {
                                'st': st,
                                'pd': pd,
                                'np': np,
                                'px': px,
                                'plt': plt,
                                'go': go,
                                'dataframes': st.session_state['dataframes']
                            }
                            
                            try:
                                # Executar o c√≥digo
                                exec(code_input, globals(), local_vars)
                                
                                # Verificar se algum gr√°fico foi criado
                                for var_name, var_value in local_vars.items():
                                    if isinstance(var_value, go.Figure):
                                        st.plotly_chart(var_value, use_container_width=True)
                                    elif isinstance(var_value, plt.Figure):
                                        st.pyplot(var_value)
                                
                                # Verificar se h√° uma figura atual do matplotlib
                                if plt.get_fignums():
                                    st.pyplot(plt.gcf())
                                    plt.close('all')  # Limpar as figuras ap√≥s exibir
                                
                                # Salvar o c√≥digo
                                current_time = datetime.now()
                                code_name = f"C√≥digo {current_time.strftime('%H:%M')}"
                                if 'file_added_codes' not in st.session_state:
                                    st.session_state['file_added_codes'] = []
                                st.session_state['file_added_codes'].append({
                                    'name': code_name,
                                    'code': code_input,
                                    'timestamp': current_time.strftime("%Y-%m-%d %H:%M:%S")
                                })
                                
                                st.success("C√≥digo executado e salvo com sucesso!")
                            except Exception as e:
                                st.error(f"Erro ao executar o c√≥digo: {str(e)}")
                                st.info("""
                                Dicas para resolver o erro:
                                1. Verifique se as colunas que voc√™ est√° usando existem no DataFrame
                                2. Certifique-se de que est√° usando colunas num√©ricas para opera√ß√µes matem√°ticas
                                3. Use df.dtypes para verificar os tipos de dados das colunas
                                4. Use df.head() para visualizar os dados antes de fazer opera√ß√µes
                                """)
                        except Exception as e:
                            st.error(f"Erro ao executar o c√≥digo: {str(e)}")
                    else:
                        st.error("Por favor, insira o c√≥digo.")
            
            with col2:
                if st.button("Cancelar", key="file_cancel_code_button"):
                    st.session_state['show_file_code_input'] = False
                    st.experimental_rerun()

        # Container para c√≥digos adicionados
        if st.session_state.get('file_added_codes', []):
            st.markdown("---")
            st.subheader("C√≥digos Salvos")
            
            for idx, code_item in enumerate(st.session_state['file_added_codes']):
                with st.expander(f"{code_item['name']} - {code_item['timestamp']}"):
                    st.code(code_item['code'], language='python')
                    
                    col1, col2 = st.columns([1, 5])
                    with col1:
                        if st.button("Executar", key=f"file_run_saved_{idx}"):
                            try:
                                # Criar um namespace local para execu√ß√£o
                                local_vars = {
                                    'st': st,
                                    'pd': pd,
                                    'np': np,
                                    'px': px,
                                    'plt': plt,
                                    'go': go,
                                    'dataframes': st.session_state['dataframes']
                                }
                                
                                # Executar o c√≥digo
                                exec(code_item['code'], globals(), local_vars)
                                
                                # Verificar se algum gr√°fico foi criado
                                for var_name, var_value in local_vars.items():
                                    if isinstance(var_value, go.Figure):
                                        st.plotly_chart(var_value, use_container_width=True)
                                    elif isinstance(var_value, plt.Figure):
                                        st.pyplot(var_value)
                                
                                # Verificar se h√° uma figura atual do matplotlib
                                if plt.get_fignums():
                                    st.pyplot(plt.gcf())
                                    plt.close('all')  # Limpar as figuras ap√≥s exibir
                                
                                st.success("C√≥digo executado com sucesso!")
                            except Exception as e:
                                st.error(f"Erro ao executar o c√≥digo: {str(e)}")
                                st.info("""
                                Dicas para resolver o erro:
                                1. Verifique se as colunas que voc√™ est√° usando existem no DataFrame
                                2. Certifique-se de que est√° usando colunas num√©ricas para opera√ß√µes matem√°ticas
                                3. Use df.dtypes para verificar os tipos de dados das colunas
                                4. Use df.head() para visualizar os dados antes de fazer opera√ß√µes
                                """)
                    
                    with col2:
                        if st.button("Remover", key=f"file_remove_{idx}"):
                            st.session_state['file_added_codes'].pop(idx)
                            st.experimental_rerun()

            # Container para visualiza√ß√µes
            with st.container():
                st.markdown("---")
                st.subheader("Visualiza√ß√µes")
                
                # Selecionar tipo de visualiza√ß√£o
                viz_type = st.selectbox(
                    "Tipo de Visualiza√ß√£o",
                    ["Gr√°fico de Barras", "Gr√°fico de Linha", "Gr√°fico de Dispers√£o", "Histograma", "Box Plot"]
                )
                
                # Selecionar colunas para visualiza√ß√£o
                if df.select_dtypes(include=[np.number]).columns.any():
                    numeric_cols = df.select_dtypes(include=[np.number]).columns.tolist()
                    x_col = st.selectbox("Coluna X", numeric_cols)
                    
                    if viz_type in ["Gr√°fico de Dispers√£o", "Box Plot"]:
                        y_col = st.selectbox("Coluna Y", numeric_cols)
                    
                    # Criar visualiza√ß√£o
                    if viz_type == "Gr√°fico de Barras":
                        fig = px.bar(df, x=x_col, title=f"Gr√°fico de Barras - {x_col}")
                    elif viz_type == "Gr√°fico de Linha":
                        fig = px.line(df, x=x_col, title=f"Gr√°fico de Linha - {x_col}")
                    elif viz_type == "Gr√°fico de Dispers√£o":
                        fig = px.scatter(df, x=x_col, y=y_col, title=f"Gr√°fico de Dispers√£o - {x_col} vs {y_col}")
                    elif viz_type == "Histograma":
                        fig = px.histogram(df, x=x_col, title=f"Histograma - {x_col}")
                    elif viz_type == "Box Plot":
                        fig = px.box(df, x=x_col, y=y_col, title=f"Box Plot - {x_col} vs {y_col}")
                    
                    st.plotly_chart(fig, use_container_width=True)
                else:
                    st.warning("N√£o h√° colunas num√©ricas para visualiza√ß√£o.") 